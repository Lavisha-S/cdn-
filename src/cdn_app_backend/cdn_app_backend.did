type Role = variant {
  Admin;
  Publisher;
  Viewer;
};

type FileInfo = record {
  id: text;
  filename: text;
  uploader: text;
  uploaded_at: nat64;
};

type FileContents = record {
  filename: text;
  content: blob;
};

type Config = record {
  max_file_size_bytes: nat64;
  uploads_enabled: bool;
  cdn_domain: opt text;
  last_updated_nanos: nat64;
};

type ResultText = variant { ok: text; err: text };
type ResultFile = variant { ok: FileContents; err: text };
type ResultFileInfoVec = variant { ok: vec FileInfo; err: text };
type ResultRoleVec = variant { ok: vec Role; err: text };
type ResultConfig = variant { ok: Config; err: text };
type ResultRoleMap = variant { ok: vec record { text; vec Role }; err: text };

service : {
  // Health and stats
  health: () -> (text) query;
  stats: () -> (text) query;

  // File operations
  upload_file: (text, blob) -> (ResultText);
  get_file: (text) -> (ResultFile) query;
  list_files: () -> (ResultFileInfoVec) query;
  delete_file: (text) -> (ResultText);
  wipe_all: () -> (ResultText);

  // Authorization
  whoami: () -> (text, vec Role) query;
  grant_role: (text, Role) -> (ResultRoleVec);
  revoke_role: (text, Role) -> (ResultRoleVec);
  list_roles_of: (text) -> (ResultRoleVec) query;
  list_all_user_roles: () -> (ResultRoleMap) query;

  // Configuration
  get_config: () -> (Config) query;
  update_config: (opt nat64, opt bool, opt opt text) -> (ResultConfig);
  reset_config: () -> (ResultConfig);
}
